import{_ as s,c as n,o as a,d as l}from"./app.0e77a245.js";const A=JSON.parse('{"title":"Vue-Router","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础知识回顾","slug":"基础知识回顾","link":"#基础知识回顾","children":[]},{"level":2,"title":"手写 vue-router","slug":"手写-vue-router","link":"#手写-vue-router","children":[]}],"relativePath":"vue/vue-router.md","lastUpdated":1690980443000}'),p={name:"vue/vue-router.md"},o=l(`<h1 id="vue-router" tabindex="-1">Vue-Router <a class="header-anchor" href="#vue-router" aria-hidden="true">#</a></h1><h2 id="基础知识回顾" tabindex="-1">基础知识回顾 <a class="header-anchor" href="#基础知识回顾" aria-hidden="true">#</a></h2><h4 id="安装-vue-router" tabindex="-1">安装 vue-router <a class="header-anchor" href="#安装-vue-router" aria-hidden="true">#</a></h4><ol><li>vue-cli 创建项目时勾选上 vue-router</li><li>已有的 vue 项目安装 vue-router 依赖</li></ol><h4 id="创建-vue-的实例要加入-router-做了什么" tabindex="-1">创建 vue 的实例要加入 router 做了什么？ <a class="header-anchor" href="#创建-vue-的实例要加入-router-做了什么" aria-hidden="true">#</a></h4><p>​ 会挂载$router和$route 这两个对象到 vue 对象上。</p><h4 id="动态路由传参的方式" tabindex="-1">动态路由传参的方式 <a class="header-anchor" href="#动态路由传参的方式" aria-hidden="true">#</a></h4><ol><li><p>routes 中用：路径/:id 传参</p><p><a href="http://%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%94%A8$route.params.id" target="_blank" rel="noreferrer">在组件中用$route.params.id</a> 接收</p></li><li><p>route 中用：路径/:id</p><p>prop:true 传参</p><p>在组件中用 props:[&#39;id&#39;]接收</p></li></ol><p>​ 更推荐使用第二种</p><h4 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a></h4><p>​ 嵌套路由可以把页面公共部分提取出来，写到一个公共组件，变换的部分用 router-view 占位。</p><h4 id="router-push和-router-replace-的区别" tabindex="-1">$router.push和$router.replace 的区别 <a class="header-anchor" href="#router-push和-router-replace-的区别" aria-hidden="true">#</a></h4><p>​ push 会记录跳转，浏览器可退回，relace 不会</p><h4 id="hash-和-history-的区别" tabindex="-1">Hash 和 History 的区别 <a class="header-anchor" href="#hash-和-history-的区别" aria-hidden="true">#</a></h4><p>​ 首先，这俩都是客户端的转跳，不请求后端，请求后端内容需要发起 ajax 请求</p><p>不同：</p><ol><li><p>hash 有#，history 没有，但 history 需要后端配置支持</p></li><li><p>Hah 是基于锚点，用 onhashchange 事件</p><p>history 用 HTML5 的 history API：history.pushState()、history.replaceState()，并且仅支持 IE 10 以后</p></li></ol><h4 id="history-模式为什么需要后端配置" tabindex="-1">History 模式为什么需要后端配置？ <a class="header-anchor" href="#history-模式为什么需要后端配置" aria-hidden="true">#</a></h4><p>​ 单页面应用中，在正常的跳转情况下，history 和 hash 一样，没什么问题。但是，当浏览器刷新页面的时候就会有问题了，浏览器想服务端发起请求的时候不会带上 hash 的#后面的内容，但是 history 没有#，所以 history 会像服务端发送整个请求地址，服务端没有配置，就可能会返回 404，但是有的内容需要在前端用 url 处理，所以需要后端在找不到该地址的时候，返回 index.html。</p><p>​ 另外，vue-router 默认是 hash 模式，如果需要切换为 history 模式，那么需要在创建 router 实例的时候，配置 mode:history</p><p>​ 需要注意的是，vue-cli 自带的 webServer 已经支持好了对 history 的配置，所以看不出来问题，但打包部署到 node 或是 nginx 的服务器中，就会出问题了。</p><h2 id="手写-vue-router" tabindex="-1">手写 vue-router <a class="header-anchor" href="#手写-vue-router" aria-hidden="true">#</a></h2><h4 id="vuerouter-类有些什么" tabindex="-1">VueRouter 类有些什么？ <a class="header-anchor" href="#vuerouter-类有些什么" aria-hidden="true">#</a></h4><ol><li><p>3 个属性</p><p>options：记录传入的对象</p><p>data：记录路由地址，有一个 current 属性记录当前地址</p><p>routeMap：记录路由规则</p></li><li><p>6 个方法：</p><p>一个静态方法：install（vue.use 接收函数或对象，接收函数直接执行，接收对象则调用对象的 install 方法）</p><p>公开方法：</p><p>​ Constructor：初始化</p><p>​ init：用来调用下面三个方法</p><p>​ initEvent：注册 popState 监听浏览器变化</p><p>​ createRouteMap：初始化 routeMap，映射传入的路由和组件</p><p>​ initComponent：创建 router-link 和 router-view</p></li></ol><h4 id="手写-vue-router-代码" tabindex="-1">手写 Vue-Router 代码 <a class="header-anchor" href="#手写-vue-router-代码" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">_Vue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">VueRouter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//install方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//1.判断方法是否已经被安装，已经被安装就不需要再次安装了</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">VueRouter</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">install</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">installed</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">VueRouter</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">install</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">installed</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//2.记录vue构造函数到全局中，方便后面的方法使用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">_Vue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//3.把传入的router对象注入到Vue实例上</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//混入,因为静态方法调用的this指向的是vueRouter这个类，而我们在创建vue实例的时候传入的router，所以我们需要this指向vue实例</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">_Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//Vue的组件都是Vue实例，所有组件beforeCreate的时候都能执行</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">//只有Vue创建的时候的实例有router，其余组件没有</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">_Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">//调用初始化方法</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//构造函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routeMap</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Vue.observable用来创建响应式对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observable</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//初始化方法</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRouteMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initComponents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_Vue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initEvent</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//创建路径与组件的映射关系</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">createRouteMap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//遍历所有的路由规则，把路由规则解析成键值对的形式，存储到routeMap中</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routeMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//创建router-link和router-view两个组件</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">initComponents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//需要创建router-link和router-view这两个组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Vue.component(&quot;router-link&quot;, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//   props: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//     to: String,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//   },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//   template: &#39;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//如果使用运行时版本的vue-cli，那template不会被编译成渲染函数，会报错</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//解决方法1：在vue.config.js中去设置runtimeCompiler: true,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//解决办法2：不用template，自己写个render函数，如下</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;router-link&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//h的作用是用来创建虚拟dom</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">on</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E06C75;">click</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clickHandler</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#ABB2BF;">          [</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$slots</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">clickHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">({}, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;router-view&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">component</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routeMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//处理浏览器前进后退</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">initEvent</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;popstate&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> _Vue </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">class</span><span style="color:#B392F0;"> VueRouter {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//install方法</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> install(Vue) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//1.判断方法是否已经被安装，已经被安装就不需要再次安装了</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">VueRouter</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">install</span><span style="color:#B392F0;">.installed) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">VueRouter</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">install</span><span style="color:#B392F0;">.installed </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//2.记录vue构造函数到全局中，方便后面的方法使用</span></span>
<span class="line"><span style="color:#B392F0;">    _Vue </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Vue;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//3.把传入的router对象注入到Vue实例上</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//混入,因为静态方法调用的this指向的是vueRouter这个类，而我们在创建vue实例的时候传入的router，所以我们需要this指向vue实例</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">_Vue</span><span style="color:#B392F0;">.mixin({</span></span>
<span class="line"><span style="color:#B392F0;">      beforeCreate() {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">//Vue的组件都是Vue实例，所有组件beforeCreate的时候都能执行</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$options</span><span style="color:#B392F0;">.router) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">//只有Vue创建的时候的实例有router，其余组件没有</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">_Vue</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.$router </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$options</span><span style="color:#B392F0;">.router;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">//调用初始化方法</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$options</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.init();</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//构造函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(options) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> options;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.routeMap </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {};</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Vue.observable用来创建响应式对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">_Vue</span><span style="color:#B392F0;">.observable({</span></span>
<span class="line"><span style="color:#B392F0;">      current</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//初始化方法</span></span>
<span class="line"><span style="color:#B392F0;">  init() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.createRouteMap();</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.initComponents(_Vue);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.initEvent();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//创建路径与组件的映射关系</span></span>
<span class="line"><span style="color:#B392F0;">  createRouteMap() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//遍历所有的路由规则，把路由规则解析成键值对的形式，存储到routeMap中</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">routes</span><span style="color:#B392F0;">.forEach((route) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.routeMap[</span><span style="color:#79B8FF;">route</span><span style="color:#B392F0;">.path] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">route</span><span style="color:#B392F0;">.component;</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//创建router-link和router-view两个组件</span></span>
<span class="line"><span style="color:#B392F0;">  initComponents(Vue) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//需要创建router-link和router-view这两个组件</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// Vue.component(&quot;router-link&quot;, {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//   props: {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//     to: String,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//   },</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//   template: &#39;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#39;,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//如果使用运行时版本的vue-cli，那template不会被编译成渲染函数，会报错</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//解决方法1：在vue.config.js中去设置runtimeCompiler: true,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//解决办法2：不用template，自己写个render函数，如下</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.component(</span><span style="color:#FFAB70;">&quot;router-link&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      props</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        to</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> String</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      render(h) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">//h的作用是用来创建虚拟dom</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> h(</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#FFAB70;">&quot;a&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          {</span></span>
<span class="line"><span style="color:#B392F0;">            attrs</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">              href</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.to</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            on</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">              click</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.clickHandler</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          [</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$slots</span><span style="color:#B392F0;">.default]</span></span>
<span class="line"><span style="color:#B392F0;">        );</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      methods</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        clickHandler(e) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">history</span><span style="color:#B392F0;">.pushState({}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.to);</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$router</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">data</span><span style="color:#B392F0;">.current </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.to;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">e</span><span style="color:#B392F0;">.preventDefault();</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">self</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.component(</span><span style="color:#FFAB70;">&quot;router-view&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      render(h) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">component</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">self</span><span style="color:#B392F0;">.routeMap[</span><span style="color:#79B8FF;">self</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">data</span><span style="color:#B392F0;">.current];</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> h(component);</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//处理浏览器前进后退</span></span>
<span class="line"><span style="color:#B392F0;">  initEvent() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.addEventListener(</span><span style="color:#FFAB70;">&quot;popstate&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">data</span><span style="color:#B392F0;">.current </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.pathname;</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div>`,26),e=[o];function r(t,c,B,y,i,F){return a(),n("div",null,e)}const b=s(p,[["render",r]]);export{A as __pageData,b as default};
