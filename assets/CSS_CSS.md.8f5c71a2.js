import{_ as a,c as s,o as n,a as l}from"./app.a10aed05.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. CSS选择器及其优先级","slug":"_1-css选择器及其优先级","link":"#_1-css选择器及其优先级","children":[]},{"level":3,"title":"2. display的属性值及其作用","slug":"_2-display的属性值及其作用","link":"#_2-display的属性值及其作用","children":[]},{"level":3,"title":"3. display的block、inline和inline-block的区别","slug":"_3-display的block、inline和inline-block的区别","link":"#_3-display的block、inline和inline-block的区别","children":[]},{"level":3,"title":"4. 隐藏元素的方法有哪些","slug":"_4-隐藏元素的方法有哪些","link":"#_4-隐藏元素的方法有哪些","children":[]},{"level":3,"title":"5. 对盒模型的理解","slug":"_5-对盒模型的理解","link":"#_5-对盒模型的理解","children":[]},{"level":3,"title":"6. CSS3中有哪些新特性","slug":"_6-css3中有哪些新特性","link":"#_6-css3中有哪些新特性","children":[]},{"level":3,"title":"7. 单行、多行文本溢出隐藏","slug":"_7-单行、多行文本溢出隐藏","link":"#_7-单行、多行文本溢出隐藏","children":[]},{"level":3,"title":"8. 两栏布局的实现","slug":"_8-两栏布局的实现","link":"#_8-两栏布局的实现","children":[]},{"level":3,"title":"9. 三栏布局的实现","slug":"_9-三栏布局的实现","link":"#_9-三栏布局的实现","children":[]},{"level":3,"title":"10. 水平垂直居中的实现","slug":"_10-水平垂直居中的实现","link":"#_10-水平垂直居中的实现","children":[]},{"level":3,"title":"11. 对Flex布局的理解及其使用场景","slug":"_11-对flex布局的理解及其使用场景","link":"#_11-对flex布局的理解及其使用场景","children":[]},{"level":3,"title":"12. 为什么需要清除浮动？清除浮动的方式","slug":"_12-为什么需要清除浮动-清除浮动的方式","link":"#_12-为什么需要清除浮动-清除浮动的方式","children":[]},{"level":3,"title":"13.使用 clear 属性清除浮动的原理？","slug":"_13-使用-clear-属性清除浮动的原理","link":"#_13-使用-clear-属性清除浮动的原理","children":[]},{"level":3,"title":"14. 对BFC的理解，如何创建BFC","slug":"_14-对bfc的理解-如何创建bfc","link":"#_14-对bfc的理解-如何创建bfc","children":[]},{"level":3,"title":"15. 什么是margin重叠问题？如何解决？","slug":"_15-什么是margin重叠问题-如何解决","link":"#_15-什么是margin重叠问题-如何解决","children":[]},{"level":3,"title":"16. position的属性有哪些，区别是什么","slug":"_16-position的属性有哪些-区别是什么","link":"#_16-position的属性有哪些-区别是什么","children":[]},{"level":3,"title":"17. 实现一个三角形","slug":"_17-实现一个三角形","link":"#_17-实现一个三角形","children":[]},{"level":3,"title":"18. 实现一个扇形","slug":"_18-实现一个扇形","link":"#_18-实现一个扇形","children":[]},{"level":3,"title":"19. 如何解决 1px 问题？","slug":"_19-如何解决-1px-问题","link":"#_19-如何解决-1px-问题","children":[]},{"level":3,"title":"20. CSS中可继承与不可继承属性有哪些","slug":"_20-css中可继承与不可继承属性有哪些","link":"#_20-css中可继承与不可继承属性有哪些","children":[]},{"level":3,"title":"21. link和@import的区别","slug":"_21-link和-import的区别","link":"#_21-link和-import的区别","children":[]},{"level":3,"title":"22. 伪元素和伪类的区别和作用？","slug":"_22-伪元素和伪类的区别和作用","link":"#_22-伪元素和伪类的区别和作用","children":[]},{"level":3,"title":"23. 常见的图片格式及使用场景","slug":"_23-常见的图片格式及使用场景","link":"#_23-常见的图片格式及使用场景","children":[]},{"level":3,"title":"24. 对 CSSSprites 的理解","slug":"_24-对-csssprites-的理解","link":"#_24-对-csssprites-的理解","children":[]},{"level":3,"title":"22. CSS预处理器/后处理器是什么？为什么要使用它们？","slug":"_22-css预处理器-后处理器是什么-为什么要使用它们","link":"#_22-css预处理器-后处理器是什么-为什么要使用它们","children":[]},{"level":3,"title":"23. 对line-height 的理解及其赋值方式","slug":"_23-对line-height-的理解及其赋值方式","link":"#_23-对line-height-的理解及其赋值方式","children":[]},{"level":3,"title":"24. CSS 优化和提高性能的方法有哪些？","slug":"_24-css-优化和提高性能的方法有哪些","link":"#_24-css-优化和提高性能的方法有哪些","children":[]},{"level":3,"title":"25. 对媒体查询的理解？","slug":"_25-对媒体查询的理解","link":"#_25-对媒体查询的理解","children":[]},{"level":3,"title":"26. 常见的CSS布局单位","slug":"_26-常见的css布局单位","link":"#_26-常见的css布局单位","children":[]},{"level":3,"title":"27. display、float、position的关系","slug":"_27-display、float、position的关系","link":"#_27-display、float、position的关系","children":[]},{"level":3,"title":"28. 画一条0.5px的线","slug":"_28-画一条0-5px的线","link":"#_28-画一条0-5px的线","children":[]},{"level":3,"title":"29. 设置小于12px的字体","slug":"_29-设置小于12px的字体","link":"#_29-设置小于12px的字体","children":[]},{"level":3,"title":"30. transition和animation的区别","slug":"_30-transition和animation的区别","link":"#_30-transition和animation的区别","children":[]},{"level":3,"title":"31. 对requestAnimationframe的理解","slug":"_31-对requestanimationframe的理解","link":"#_31-对requestanimationframe的理解","children":[]},{"level":3,"title":"32. 为什么有时候⽤translate来改变位置⽽不是定位？","slug":"_32-为什么有时候用translate来改变位置而不是定位","link":"#_32-为什么有时候用translate来改变位置而不是定位","children":[]},{"level":3,"title":"33. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？","slug":"_33-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决","link":"#_33-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决","children":[]},{"level":3,"title":"34. 替换元素的概念及计算规则","slug":"_34-替换元素的概念及计算规则","link":"#_34-替换元素的概念及计算规则","children":[]},{"level":3,"title":"35. 如何判断元素是否到达可视区域","slug":"_35-如何判断元素是否到达可视区域","link":"#_35-如何判断元素是否到达可视区域","children":[]},{"level":3,"title":"36. z-index属性在什么情况下会失效","slug":"_36-z-index属性在什么情况下会失效","link":"#_36-z-index属性在什么情况下会失效","children":[]},{"level":3,"title":"37. CSS3中的transform有哪些属性","slug":"_37-css3中的transform有哪些属性","link":"#_37-css3中的transform有哪些属性","children":[]},{"level":3,"title":"38. 如何根据设计稿进行移动端适配？","slug":"_38-如何根据设计稿进行移动端适配","link":"#_38-如何根据设计稿进行移动端适配","children":[]},{"level":3,"title":"39. 元素的层叠顺序","slug":"_39-元素的层叠顺序","link":"#_39-元素的层叠顺序","children":[]}],"relativePath":"CSS/CSS.md","lastUpdated":null}'),e={name:"CSS/CSS.md"},i=l(`<h3 id="_1-css选择器及其优先级" tabindex="-1">1. CSS选择器及其优先级 <a class="header-anchor" href="#_1-css选择器及其优先级" aria-hidden="true">#</a></h3><p>!important&gt;内联样式&gt;id&gt;类/伪类/属性/&gt;标签/伪元素&gt;*</p><h3 id="_2-display的属性值及其作用" tabindex="-1">2. display的属性值及其作用 <a class="header-anchor" href="#_2-display的属性值及其作用" aria-hidden="true">#</a></h3><p>none:元素不显示，并从文档流中移除</p><p>block：块级元素</p><p>inline-block：行内块元素</p><p>inline：行内元素</p><p>flex：flex布局</p><p>table：块级表格</p><p>Inherit：继承父元素display</p><h3 id="_3-display的block、inline和inline-block的区别" tabindex="-1">3. display的block、inline和inline-block的区别 <a class="header-anchor" href="#_3-display的block、inline和inline-block的区别" aria-hidden="true">#</a></h3><p>block：块级元素，独占一行，可以设置width、height、margin、padding</p><p>inline：行内元素，不单独一行，设置width、height、和垂直方向上的margin、padding无效</p><p>inline-block：行内块，不独占一行，但可以设置width、height、margin、padding</p><h3 id="_4-隐藏元素的方法有哪些" tabindex="-1">4. 隐藏元素的方法有哪些 <a class="header-anchor" href="#_4-隐藏元素的方法有哪些" aria-hidden="true">#</a></h3><p>display：none，文档流中移除，渲染树中不存在，不在页面中占位，不触发事件，不可继承，不可被读屏器读取</p><p>visibility：hidden，隐藏，在页面中仍占据位置，但不能触发绑定事件，可继承，可被读屏器读取</p><p>opacity：0，透明，在页面中占据位置，可以触发绑定事件</p><p>position：absolute，移出可视区域</p><p>z-index：负</p><p>clip/clip-path：裁剪掉，占位，但不触发事件</p><p>transform：scale(0,0)，缩小为0，占位，不响应事件</p><h3 id="_5-对盒模型的理解" tabindex="-1">5. 对盒模型的理解 <a class="header-anchor" href="#_5-对盒模型的理解" aria-hidden="true">#</a></h3><p>盒模型=content+padding+border+margin</p><p>标准盒模型：width=content</p><p>IE盒模型（怪异盒模型）：width=content+padding+border</p><p>box-sizing：content-box 设置标准盒模型（默认）</p><p>box-sizing：border-box 设置IE盒模型</p><h3 id="_6-css3中有哪些新特性" tabindex="-1">6. CSS3中有哪些新特性 <a class="header-anchor" href="#_6-css3中有哪些新特性" aria-hidden="true">#</a></h3><p>选择器、border-radius、text-shadow、gradient、transform、动画（旋转、缩放、倾斜、定位）</p><h3 id="_7-单行、多行文本溢出隐藏" tabindex="-1">7. 单行、多行文本溢出隐藏 <a class="header-anchor" href="#_7-单行、多行文本溢出隐藏" aria-hidden="true">#</a></h3><p>单行</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">overflow: hidden;            // 溢出隐藏</span></span>
<span class="line"><span style="color:#abb2bf;">text-overflow: ellipsis;      // 溢出用省略号显示</span></span>
<span class="line"><span style="color:#abb2bf;">white-space: nowrap;         // 规定段落中的文本不进行换行</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">overflow: hidden;            // 溢出隐藏</span></span>
<span class="line"><span style="color:#b392f0;">text-overflow: ellipsis;      // 溢出用省略号显示</span></span>
<span class="line"><span style="color:#b392f0;">white-space: nowrap;         // 规定段落中的文本不进行换行</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>多行</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">overflow: hidden;            // 溢出隐藏</span></span>
<span class="line"><span style="color:#abb2bf;">text-overflow: ellipsis;     // 溢出用省略号显示</span></span>
<span class="line"><span style="color:#abb2bf;">display:-webkit-box;         // 作为弹性伸缩盒子模型显示。</span></span>
<span class="line"><span style="color:#abb2bf;">-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span></span>
<span class="line"><span style="color:#abb2bf;">-webkit-line-clamp:3;        // 显示的行数</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">overflow: hidden;            // 溢出隐藏</span></span>
<span class="line"><span style="color:#b392f0;">text-overflow: ellipsis;     // 溢出用省略号显示</span></span>
<span class="line"><span style="color:#b392f0;">display:-webkit-box;         // 作为弹性伸缩盒子模型显示。</span></span>
<span class="line"><span style="color:#b392f0;">-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span></span>
<span class="line"><span style="color:#b392f0;">-webkit-line-clamp:3;        // 显示的行数</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_8-两栏布局的实现" tabindex="-1">8. 两栏布局的实现 <a class="header-anchor" href="#_8-两栏布局的实现" aria-hidden="true">#</a></h3><p>两栏布局：左边固定，右边自适应</p><ol><li>左边浮动，设置宽度为固定值；右边设置margin-left为左边元素宽度，宽度设置为auto</li><li>左边浮动，设置宽度为固定值；右边设置overflow：hidden触发BFC，BFC区域不会与浮动元素重叠</li><li>父元素设置display：flex，左元素设置宽度，右元素设置flex：1</li><li>父元素设置position：relative，左元素设置position：absolute和宽度，右元素margin-left左元素宽度</li><li>父元素设置position：relative，左元素宽度，右元素position：absolute，left：左元素宽度，top、bottom、right都为0</li></ol><h3 id="_9-三栏布局的实现" tabindex="-1">9. 三栏布局的实现 <a class="header-anchor" href="#_9-三栏布局的实现" aria-hidden="true">#</a></h3><p>三栏布局：左右固定、中间自适应。</p><ol><li>左右两栏设置为绝对定位，中间设置对应方向大小的margin的值</li><li>利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1</li><li>左浮动+右浮动，中间放最后，设置两个方向的margin</li><li>圣杯布局：父元素设置左右padding，中间最前左浮动，左边左浮动margin-left：-100%，右元素右浮动margin-left：-右宽</li><li>双飞翼布局：中间元素margin左右，左元素左浮动：left：-100%，右元素左浮动margin-left：-右宽</li></ol><h3 id="_10-水平垂直居中的实现" tabindex="-1">10. 水平垂直居中的实现 <a class="header-anchor" href="#_10-水平垂直居中的实现" aria-hidden="true">#</a></h3><ol><li><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">.parent {  </span></span>
<span class="line"><span style="color:#abb2bf;">	position: relative;</span></span>
<span class="line"><span style="color:#abb2bf;">} </span></span>
<span class="line"><span style="color:#abb2bf;">.child {  </span></span>
<span class="line"><span style="color:#abb2bf;">	position: absolute;  </span></span>
<span class="line"><span style="color:#abb2bf;">	left: 50%;    top: 50%;  </span></span>
<span class="line"><span style="color:#abb2bf;">	transform: translate(-50%,-50%);</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">.parent {  </span></span>
<span class="line"><span style="color:#b392f0;">	position: relative;</span></span>
<span class="line"><span style="color:#b392f0;">} </span></span>
<span class="line"><span style="color:#b392f0;">.child {  </span></span>
<span class="line"><span style="color:#b392f0;">	position: absolute;  </span></span>
<span class="line"><span style="color:#b392f0;">	left: 50%;    top: 50%;  </span></span>
<span class="line"><span style="color:#b392f0;">	transform: translate(-50%,-50%);</span></span>
<span class="line"><span style="color:#b392f0;">}</span></span>
<span class="line"><span style="color:#b392f0;"></span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">.parent {</span></span>
<span class="line"><span style="color:#abb2bf;">    position: relative;</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">.child {</span></span>
<span class="line"><span style="color:#abb2bf;">    position: absolute;</span></span>
<span class="line"><span style="color:#abb2bf;">    top: 0;</span></span>
<span class="line"><span style="color:#abb2bf;">    bottom: 0;</span></span>
<span class="line"><span style="color:#abb2bf;">    left: 0;</span></span>
<span class="line"><span style="color:#abb2bf;">    right: 0;</span></span>
<span class="line"><span style="color:#abb2bf;">    margin: auto;</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">.parent {</span></span>
<span class="line"><span style="color:#b392f0;">    position: relative;</span></span>
<span class="line"><span style="color:#b392f0;">}</span></span>
<span class="line"><span style="color:#b392f0;"></span></span>
<span class="line"><span style="color:#b392f0;">.child {</span></span>
<span class="line"><span style="color:#b392f0;">    position: absolute;</span></span>
<span class="line"><span style="color:#b392f0;">    top: 0;</span></span>
<span class="line"><span style="color:#b392f0;">    bottom: 0;</span></span>
<span class="line"><span style="color:#b392f0;">    left: 0;</span></span>
<span class="line"><span style="color:#b392f0;">    right: 0;</span></span>
<span class="line"><span style="color:#b392f0;">    margin: auto;</span></span>
<span class="line"><span style="color:#b392f0;">}</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">.parent {</span></span>
<span class="line"><span style="color:#abb2bf;">    display: flex;</span></span>
<span class="line"><span style="color:#abb2bf;">    justify-content:center;</span></span>
<span class="line"><span style="color:#abb2bf;">    align-items:center;</span></span>
<span class="line"><span style="color:#abb2bf;">} </span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">.parent {</span></span>
<span class="line"><span style="color:#b392f0;">    display: flex;</span></span>
<span class="line"><span style="color:#b392f0;">    justify-content:center;</span></span>
<span class="line"><span style="color:#b392f0;">    align-items:center;</span></span>
<span class="line"><span style="color:#b392f0;">} </span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h3 id="_11-对flex布局的理解及其使用场景" tabindex="-1">11. 对Flex布局的理解及其使用场景 <a class="header-anchor" href="#_11-对flex布局的理解及其使用场景" aria-hidden="true">#</a></h3><p>flex：设置盒模型（flex container）为弹性布局，同时使子元素（flex item）的float、clear、vertical-align失效</p><p>flex container有6个属性：</p><ul><li>flex-direction：决定主轴的方向（flex item的排列方向）</li><li>flex-wrap：如何换行</li><li>flex-flow：flex-direction flex-wrap 默认值为 row nowrap</li><li>justify-content：在主轴上的对齐方式</li><li>align-items：交叉轴上如何对齐</li><li>align-content：多根轴线的对其方式</li></ul><p>flex item有6个属性：</p><ul><li>order：排列顺序</li><li>flex-grow：如果存在剩余空间放大的比例，默认为0，不放大</li><li>flex-shrink：如果空间不足项目缩小的比例，默认为1，会缩小</li><li>flex-basis：定义分配空间前，占据主轴空间的大小，默认为auto即项目本身的大小</li><li>flex：flex-grow flex-shrink flex basis （flex:1=flex: 1 1 0）</li><li>align-self：单个项目对齐方式</li></ul><h3 id="_12-为什么需要清除浮动-清除浮动的方式" tabindex="-1">12. 为什么需要清除浮动？清除浮动的方式 <a class="header-anchor" href="#_12-为什么需要清除浮动-清除浮动的方式" aria-hidden="true">#</a></h3><p>浮动会引起的问题：</p><ul><li><p>父元素高度坍塌</p><p>解决：</p><ul><li>定义父元素height</li><li>最后一个浮动元素添加空div或伪元素，设置clear:both</li><li>设置父元素overflow:hidden触发BFC</li></ul></li></ul><h3 id="_13-使用-clear-属性清除浮动的原理" tabindex="-1">13.使用 clear 属性清除浮动的原理？ <a class="header-anchor" href="#_13-使用-clear-属性清除浮动的原理" aria-hidden="true">#</a></h3><p>clear的意思是元素盒子的边不能和前面浮动元素相邻，由于浮动要么是左浮动，要么是右浮动，所以clear:both = clear:left+right，即能清除浮动。</p><h3 id="_14-对bfc的理解-如何创建bfc" tabindex="-1">14. 对BFC的理解，如何创建BFC <a class="header-anchor" href="#_14-对bfc的理解-如何创建bfc" aria-hidden="true">#</a></h3><p>BFC是一个独立的布局环境，在BFC容器中不会受外部环境的影响。BFC容器在垂直方向上于文档流排列一致。能解决margin重叠和父元素高度坍塌的问题。</p><p>触发BFC的条件：</p><ul><li>根元素：body，</li><li>元素设置浮动</li><li>元素设置绝对定位：position(absolute，fixed)</li><li>Display:flex/inline-block/table-cell</li><li>overflow:hidden</li></ul><h3 id="_15-什么是margin重叠问题-如何解决" tabindex="-1">15. 什么是margin重叠问题？如何解决？ <a class="header-anchor" href="#_15-什么是margin重叠问题-如何解决" aria-hidden="true">#</a></h3><p>问题：上下两个块级元素（脱离文档流的浮动元素和绝对定位元素除外）垂直方向上，中间的边距会重叠，大小为大的那个边距。</p><p>解决：使用BFC</p><h3 id="_16-position的属性有哪些-区别是什么" tabindex="-1">16. position的属性有哪些，区别是什么 <a class="header-anchor" href="#_16-position的属性有哪些-区别是什么" aria-hidden="true">#</a></h3><ul><li>absolute：绝对定位，相对于有定位的第一个父元素设置left\\right\\top\\bottom</li><li>Relative：相对定位，相对于本身原来的定位设置left\\right\\top\\bottom</li><li>fixed：固定定位，相对于浏览器设置left\\right\\top\\bottom</li><li>sticky：粘性定位，relative+fixed，滚动在视口内是relative，滚出去是fixed，实现吸附效果</li><li>static：默认定位</li><li>inherit：继承</li></ul><h3 id="_17-实现一个三角形" tabindex="-1">17. 实现一个三角形 <a class="header-anchor" href="#_17-实现一个三角形" aria-hidden="true">#</a></h3><p>width、heigh设置为0，设置border来实现三角形，不需要的边使用transparent来隐藏，</p><h3 id="_18-实现一个扇形" tabindex="-1">18. 实现一个扇形 <a class="header-anchor" href="#_18-实现一个扇形" aria-hidden="true">#</a></h3><p>扇形在三角形的基础上设置border-radius</p><h3 id="_19-如何解决-1px-问题" tabindex="-1">19. 如何解决 1px 问题？ <a class="header-anchor" href="#_19-如何解决-1px-问题" aria-hidden="true">#</a></h3><p>1px问题：在Retina屏幕上1px变得很粗。由window.devicePixelRatio（设备物理像素/css像素）比例来确定。</p><p>比如这个比例为2，那解决办法：</p><ol><li><p>直接写0.5px</p></li><li><p>伪元素先放大后缩小，宽高设置为2倍数，但border设置为1，再用scale(0.5)，锁一下两倍</p></li><li><p>整个页面缩小2倍</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">&lt;meta name:&quot;viewport&quot; content:&quot;initial-scale=0.5,maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot; &gt;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">&lt;meta name:&quot;viewport&quot; content:&quot;initial-scale=0.5,maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot; &gt;</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="_20-css中可继承与不可继承属性有哪些" tabindex="-1">20. CSS中可继承与不可继承属性有哪些 <a class="header-anchor" href="#_20-css中可继承与不可继承属性有哪些" aria-hidden="true">#</a></h3><p>可继承：大部分与文字字体相关的属性，和visibility</p><p>不可继承的：大部分属性，如布局、盒模型的属性都不能继承。</p><h3 id="_21-link和-import的区别" tabindex="-1">21. link和@import的区别 <a class="header-anchor" href="#_21-link和-import的区别" aria-hidden="true">#</a></h3><p>link是html标签，用来加载css等</p><p>@import是css里用的，并且是在页面完全加载之后才加载，兼容性也要差一点。</p><h3 id="_22-伪元素和伪类的区别和作用" tabindex="-1">22. <strong>伪元素和伪类的区别和作用？</strong> <a class="header-anchor" href="#_22-伪元素和伪类的区别和作用" aria-hidden="true">#</a></h3><p>伪元素：在元素前后插入额外的元素，但并不在文档中生成。::before、::after</p><p>伪类：某元素的某种状态，不会产生新的元素。:hover、:first-child</p><h3 id="_23-常见的图片格式及使用场景" tabindex="-1">23. 常见的图片格式及使用场景 <a class="header-anchor" href="#_23-常见的图片格式及使用场景" aria-hidden="true">#</a></h3><p><strong>GIF</strong>：无损压缩，支持动图、透明，缺点是支持色彩少。</p><p>JPEG：色彩丰富，缺点是有损压缩、不支持透明。适合用来存储照片。</p><p>PNG：无损，支持透明，不支持动画，体积较大。</p><p>SVG：无损，支持dom操作，适合做logo、和icon</p><p>webp：支持有损和无损，各方面较不错，就是兼容性差。</p><h3 id="_24-对-csssprites-的理解" tabindex="-1">24. 对 CSSSprites 的理解 <a class="header-anchor" href="#_24-对-csssprites-的理解" aria-hidden="true">#</a></h3><p>将很多图片放到一张大图上，用css的background-image，background-repeat，background-position属性进行定位。</p><p>能减少http请求很多图片，从而提高性能，多张图合成一张图能减少内存。</p><p>缺点是使用和维护困难一点。</p><h3 id="_22-css预处理器-后处理器是什么-为什么要使用它们" tabindex="-1">22. CSS预处理器/后处理器是什么？为什么要使用它们？ <a class="header-anchor" href="#_22-css预处理器-后处理器是什么-为什么要使用它们" aria-hidden="true">#</a></h3><p>预处理器：sass、less，预编译成css，支持变量、函数、循环等。</p><p>后处理器：postcss，为css增加一些兼容性处理等。</p><h3 id="_23-对line-height-的理解及其赋值方式" tabindex="-1">23. 对<strong>line-height 的理解及其赋值方式</strong> <a class="header-anchor" href="#_23-对line-height-的理解及其赋值方式" aria-hidden="true">#</a></h3><p>line-height：一行文本的高度，可以撑开文本高度。</p><p>赋值：px、em、纯数字（比例），百分比</p><h3 id="_24-css-优化和提高性能的方法有哪些" tabindex="-1">24. CSS 优化和提高性能的方法有哪些？ <a class="header-anchor" href="#_24-css-优化和提高性能的方法有哪些" aria-hidden="true">#</a></h3><ol><li>对css文件进行打包压缩</li><li>减少重绘重排</li><li>使用雪碧图</li><li>单一样式语句比组合样式语句执行效率更高</li><li>使用link代替@import（在页面加载完毕之后才加载，可能引起样式闪烁）</li><li>选择器是从右向左找的，会遍历所有元素进行匹配，层级不要嵌套太多</li><li>尽量少使用标签、通配符选择器，而用id、class比较好</li><li>合理利用继承，避免重复设置</li></ol><h3 id="_25-对媒体查询的理解" tabindex="-1">25. 对媒体查询的理解？ <a class="header-anchor" href="#_25-对媒体查询的理解" aria-hidden="true">#</a></h3><p>媒体查询可以针对不同的媒体，设置不同的样式。</p><h3 id="_26-常见的css布局单位" tabindex="-1">26. 常见的CSS布局单位 <a class="header-anchor" href="#_26-常见的css布局单位" aria-hidden="true">#</a></h3><p>px、%、em、rem、vh、vw、vmin、vmax</p><h3 id="_27-display、float、position的关系" tabindex="-1">27. <strong>display、float、position的关系</strong> <a class="header-anchor" href="#_27-display、float、position的关系" aria-hidden="true">#</a></h3><p>display:none： position和float失效</p><p>Position:absolute\\fixed：float不生效</p><h3 id="_28-画一条0-5px的线" tabindex="-1">28. 画一条0.5px的线 <a class="header-anchor" href="#_28-画一条0-5px的线" aria-hidden="true">#</a></h3><p>Transform:scale(0.5,0.5)或用meta viewport 缩小0.5</p><h3 id="_29-设置小于12px的字体" tabindex="-1">29. 设置小于12px的字体 <a class="header-anchor" href="#_29-设置小于12px的字体" aria-hidden="true">#</a></h3><p>transform:scale(0.5)</p><h3 id="_30-transition和animation的区别" tabindex="-1">30. transition和animation的区别 <a class="header-anchor" href="#_30-transition和animation的区别" aria-hidden="true">#</a></h3><p>transition是过度动画，只有一个起始帧和一个结束帧</p><p>animation是动画，可以用@keyframe多定义几个关键帧</p><h3 id="_31-对requestanimationframe的理解" tabindex="-1">31. 对requestAnimationframe的理解 <a class="header-anchor" href="#_31-对requestanimationframe的理解" aria-hidden="true">#</a></h3><p>请求帧动画，浏览器在下一次重绘前会调用回调函数，是宏任务，后台运行时不会执行，一个刷新频率内执行一次，并且会合并所有dom操作执行，一般是每秒60帧。</p><h3 id="_32-为什么有时候用translate来改变位置而不是定位" tabindex="-1">32. 为什么有时候⽤<strong>translate</strong>来改变位置⽽不是定位？ <a class="header-anchor" href="#_32-为什么有时候用translate来改变位置而不是定位" aria-hidden="true">#</a></h3><p>transform会创建一个GPU图层，不会引起页面的重绘和重排，从而提高性能。</p><h3 id="_33-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决" tabindex="-1">33. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？ <a class="header-anchor" href="#_33-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决" aria-hidden="true">#</a></h3><p>是代码中的空格、回车、tab引起的。</p><p>解决：设置字体为0px，字间距，或者把li都写在一行</p><h3 id="_34-替换元素的概念及计算规则" tabindex="-1">34. 替换元素的概念及计算规则 <a class="header-anchor" href="#_34-替换元素的概念及计算规则" aria-hidden="true">#</a></h3><p>替换元素：修改某个属性就能被替换的元素，比如图片。</p><p>替换元素内容不受css影响，有自己的尺寸，并且都是内联的。</p><p>还能设置html尺寸和css尺寸</p><h3 id="_35-如何判断元素是否到达可视区域" tabindex="-1">35. 如何判断元素是否到达可视区域 <a class="header-anchor" href="#_35-如何判断元素是否到达可视区域" aria-hidden="true">#</a></h3><p>window.innerHeight（浏览器可是高度）+ document.body.scrollTop（滚出的高度）&gt; 元素.offsetTop</p><h3 id="_36-z-index属性在什么情况下会失效" tabindex="-1">36. z-index属性在什么情况下会失效 <a class="header-anchor" href="#_36-z-index属性在什么情况下会失效" aria-hidden="true">#</a></h3><ol><li>元素没有设置position</li><li>父元祖position:relative，子元素z-index失效</li><li>设置了float</li></ol><h3 id="_37-css3中的transform有哪些属性" tabindex="-1">37. CSS3中的transform有哪些属性 <a class="header-anchor" href="#_37-css3中的transform有哪些属性" aria-hidden="true">#</a></h3><p>transform: rotate | scale | skew | translate</p><h3 id="_38-如何根据设计稿进行移动端适配" tabindex="-1">38. 如何根据设计稿进行移动端适配？ <a class="header-anchor" href="#_38-如何根据设计稿进行移动端适配" aria-hidden="true">#</a></h3><p>移动端适配主要有两个维度：</p><ul><li><strong>适配不同像素密度，</strong> 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；</li><li><strong>适配不同屏幕大小，</strong> 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。</li></ul><p>为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。</p><h3 id="_39-元素的层叠顺序" tabindex="-1">39. 元素的层叠顺序 <a class="header-anchor" href="#_39-元素的层叠顺序" aria-hidden="true">#</a></h3><p>正z-index &gt; z-index=0 &gt; inline &gt; float &gt; block &gt; 负z-index &gt; 背景/边框</p>`,135),p=[i];function r(t,o,c,d,h,b){return n(),s("div",null,p)}const _=a(e,[["render",r]]);export{u as __pageData,_ as default};
