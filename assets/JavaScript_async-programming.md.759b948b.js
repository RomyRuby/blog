import{_ as s,c as n,o as a,a as l}from"./app.2d43daee.js";const p="/blog/assets/1693225656643.b2191f61.png",o="/blog/assets/1693225870863.38fb44a7.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. 异步编程的实现方式？","slug":"_1-异步编程的实现方式","link":"#_1-异步编程的实现方式","children":[]},{"level":3,"title":"2. setTimeout、Promise、Async/Await 的区别","slug":"_2-settimeout、promise、async-await-的区别","link":"#_2-settimeout、promise、async-await-的区别","children":[]},{"level":3,"title":"3. 对Promise的理解","slug":"_3-对promise的理解","link":"#_3-对promise的理解","children":[]},{"level":3,"title":"4. 对async/await 的理解","slug":"_4-对async-await-的理解","link":"#_4-对async-await-的理解","children":[]},{"level":3,"title":"5. async/await对比Promise的优势","slug":"_5-async-await对比promise的优势","link":"#_5-async-await对比promise的优势","children":[]},{"level":3,"title":"6. 事件循环——EvenLoop","slug":"_6-事件循环——evenloop","link":"#_6-事件循环——evenloop","children":[]}],"relativePath":"JavaScript/async-programming.md","lastUpdated":1693810075000}'),e={name:"JavaScript/async-programming.md"},r=l('<h3 id="_1-异步编程的实现方式" tabindex="-1">1. 异步编程的实现方式？ <a class="header-anchor" href="#_1-异步编程的实现方式" aria-hidden="true">#</a></h3><ul><li>回调函数</li><li>setTimeout、setInterval</li><li>promise</li><li>generator</li><li>async</li></ul><h3 id="_2-settimeout、promise、async-await-的区别" tabindex="-1">2. setTimeout、Promise、Async/Await 的区别 <a class="header-anchor" href="#_2-settimeout、promise、async-await-的区别" aria-hidden="true">#</a></h3><p>setTimeout是异步宏任务</p><p>Promise本身是同步的，resolve/reject后的处理函数才是异步微任务</p><p>async：async遇到await会等待await后的代码执行完毕再往下执行，await返回promise对象</p><h3 id="_3-对promise的理解" tabindex="-1">3. 对Promise的理解 <a class="header-anchor" href="#_3-对promise的理解" aria-hidden="true">#</a></h3><h5 id="异步处理es6办法5" tabindex="-1">异步处理ES6办法5 <a class="header-anchor" href="#异步处理es6办法5" aria-hidden="true">#</a></h5><p>为了兼容以往对异步处理的方法，以及解决以往异步处理事件和回调的缺陷，ES6使用了Promise A+规范，来专门处理异步问题：避免回调地狱，使异步代码更加整洁、统一。</p><h5 id="promise-a-规范" tabindex="-1"><strong>promise A+规范：</strong> <a class="header-anchor" href="#promise-a-规范" aria-hidden="true">#</a></h5><p>在promiseA+中，把每一个异步任务都看做一个promise对象，每一个任务对象都有两个阶段（unsettled，settled）,三个状态（pending，resolved，rejected，）</p><p><strong>两个阶段：</strong></p><ol><li>unsettled：事情未解决阶段，事情还没有结果。</li><li>settled：事情已解决阶段，无论是成功，还是失败，已经有结果了。</li></ol><p><strong>三个状态：</strong></p><ol><li>padding：挂起，处于未解决阶段。事情还没有结果输出，promise对象为挂起状态。</li><li>resolved：已处理，处于已解决阶段。已经有了成功的结果，可以按照正常逻辑进行下去，并可以传递一个成功信息，后续可以用.then的onFulfiled处理。</li><li>rejected：已拒绝，处于已解决阶段，已经有了失败的结果，无法按照正常逻辑进行下去，可以传递一个错误信息，后续可以用.then的onRejected处理，或使用catch处理。</li></ol><p>两个阶段是由unsettle -&gt; settled，不可逆。</p><p>三个状态是由padding -&gt; resolved/rejected，不可逆，且resolved和rejected之间的状态不可以互相切换。</p><p>也就是说，promise对象一旦有了结果，结果不可改变，不可消失。</p><p><strong>一张图看懂promise A+：</strong></p><p><img src="'+p+`" alt="1693225656643"></p><p>ES6为我们提供了PromiseAPI，来实现Promise对象的书写。</p><h5 id="promise的基本使用" tabindex="-1">promise的基本使用 <a class="header-anchor" href="#promise的基本使用" aria-hidden="true">#</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//此部分为同步部分</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//此部分决定Promise的状态，未决定之前为Padding不能进行后续对该Promise的处理</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//resolve和reject只能接受和传递一个参数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//resolve将Promise对象推入已处理状态</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//reject将Promise对象推入已拒绝状态</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请求成功&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//状态一旦改变就不可以更改</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//reject(&#39;请求失败&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//处理Promise的结果，为异步部分。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//若对应的promise为pending，则会加入作业队列，等待Promise结果。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//若Promise结果为resolved或rejected，加入微任务队列等待执行JS引擎轮询到立马执行。</span></span>
<span class="line"><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//此部分为onFulfilled，也就是thenabled处理，Promise状态为resolved接收参数并执行此部分代码。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Promise已处理，接收到传值：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//此部分为onRejected，也就是catchabled处理，Promise状态为reject接收参数并执行此部分代码。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise对象的then方法调用中也可以不写此部分，不进行错误处理，在Promise对象的catch方法中进行错误处理。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Promise已拒绝,接收到原因：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">err</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//Promise并没有消除回调，只是让回调变得可控了。</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">p1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//此部分为同步部分</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//此部分决定Promise的状态，未决定之前为Padding不能进行后续对该Promise的处理</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//resolve和reject只能接受和传递一个参数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//resolve将Promise对象推入已处理状态</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//reject将Promise对象推入已拒绝状态</span></span>
<span class="line"><span style="color:#B392F0;">  resolve(</span><span style="color:#FFAB70;">&quot;请求成功&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//状态一旦改变就不可以更改</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//reject(&#39;请求失败&#39;)</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//处理Promise的结果，为异步部分。</span></span>
<span class="line"><span style="color:#6B737C;">//若对应的promise为pending，则会加入作业队列，等待Promise结果。</span></span>
<span class="line"><span style="color:#6B737C;">//若Promise结果为resolved或rejected，加入微任务队列等待执行JS引擎轮询到立马执行。</span></span>
<span class="line"><span style="color:#79B8FF;">p1</span><span style="color:#B392F0;">.then(</span></span>
<span class="line"><span style="color:#B392F0;">  (value) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//此部分为onFulfilled，也就是thenabled处理，Promise状态为resolved接收参数并执行此部分代码。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Promise已处理，接收到传值：</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">value</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  (err) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//此部分为onRejected，也就是catchabled处理，Promise状态为reject接收参数并执行此部分代码。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise对象的then方法调用中也可以不写此部分，不进行错误处理，在Promise对象的catch方法中进行错误处理。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`Promise已拒绝,接收到原因：</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">err</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//Promise并没有消除回调，只是让回调变得可控了。</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h5 id="promise封装ajax" tabindex="-1">Promise封装Ajax <a class="header-anchor" href="#promise封装ajax" aria-hidden="true">#</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myAjax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//返回一个Promise对象</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//在不同浏览器下创建ajax对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">XMLHttpRequest</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ActiveXObject</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//设置ajax默认值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//默认请求方法为get</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//默认请求为异步</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toQueryString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toQueryString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadyStateChange</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">304</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//请求参数处理</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toQueryString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> myAjax(obj) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//返回一个Promise对象</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//在不同浏览器下创建ajax对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.XMLHttpRequest) {</span></span>
<span class="line"><span style="color:#B392F0;">      xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> XMLHttpRequest();</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> ActiveXObject();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//设置ajax默认值</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.type </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.type </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;get&quot;</span><span style="color:#B392F0;">;</span><span style="color:#6B737C;">//默认请求方法为get</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.data </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span><span style="color:#6B737C;">//默认请求为异步</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.type </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;post&quot;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toQueryString(</span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.data);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.setHeader(</span><span style="color:#FFAB70;">&quot;Content-Type&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">&quot;post&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.async);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.send(data);</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> url </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.url </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> toQueryString(</span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.data);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">&quot;get&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;">.async);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.send();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.onreadyStateChange </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.readyState </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> ((</span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">&gt;=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">200</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">&lt;=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">300</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">304</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          resolve(</span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.responseText));</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          reject(</span><span style="color:#79B8FF;">JSON</span><span style="color:#B392F0;">.parse(</span><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.status));</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    };</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//请求参数处理</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toQueryString(data) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (data) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> url </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> [key</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> value] </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.entries(data)) {</span></span>
<span class="line"><span style="color:#B392F0;">      url </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">key</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&amp;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">value</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> url;</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h5 id="promise的串联" tabindex="-1">Promise的串联： <a class="header-anchor" href="#promise的串联" aria-hidden="true">#</a></h5><p>promise.then()，promise.catch()，promise.resolve()返回的都是一个Promise对象。所以我们可以继续对新返回的Promise对象进行处理。所以Promise可以链式调用。后续的Promise一定会等到前面的Promise状态返回并处理完成后，才会进入已处理阶段。</p><p>在当前Promise的阶段在已解决阶段时，Promise的处理返回的Promise对象默认是resolved状态。如果在Promise的处理过程中抛出错误，或是返回一个新的Promise对象状态为reject，将会影响到Promise处理返回的新的Promise状态。</p><h5 id="promise的aip" tabindex="-1">Promise的AIP： <a class="header-anchor" href="#promise的aip" aria-hidden="true">#</a></h5><ul><li>Promise.then:接收两个参数，注册两个后续处理函数，第一个参数注册resolved时的处理函数，第二个参数注册rejected时的处理函数。我们通常用then来处理resolved，第二个参数可以不填</li><li>Promise.catch：注册rejected时的处理函数，链式调用时，对catch以前的rejected都可以统一处理。</li><li>Promise.finally：注册一个处理函数，无论resolved还是rejected都会执行。</li><li>Promise.resolve：返回一个resolved状态的Promise对象，并可以传一个参数。</li><li>Promise.reject：返回一个rejected状态的Promise对象，并可以传递一个参数。</li><li>Promise.all：接收一个Promise对象的数组，当所有Promise对象都进入已决阶段时，执行并返回一个新的Promise对象 。若所有Promise的处理结果均为resolved，那么新返回的Promise对象状态为resolved，并传递一个拥有所有Promise对象resolved传值，并且按顺序排列的数组。若Promise中有rejected状态，则新的Promise对象状态也为rejected，并传递第一个rejected的结果。</li><li>Promise.race：接收一个Promise对象的数组，以第一个进入已决阶段的Promise结果为准。返回第一个已决Promise的结果作为新的Promise对象的结果。</li><li>Promise.allSettled：接收一个Promise对象的数组，等待所有Promise已决，便进入resolved状态，传递所有Promise结果的数组。</li><li>Promise.any：接收一个Promise对象的数组，当出现第一个resolve状态的Promise时，发生短路，并传递resolve值。若全部rejected则会抛出一个记录错误信息的数组。</li></ul><h5 id="手写promise" tabindex="-1">手写Promise <a class="header-anchor" href="#手写promise" aria-hidden="true">#</a></h5><p><img src="`+o+`" alt="1693225870863"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//起步构建</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.用类创建Promise，类中需要有个执行器executor</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.执行者中发生错误，交给异常状态处理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.执行者中状态只能触发一次，状态触发一次之后，不能修改状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4.执行者中的this，由调用执行者的作用域决定，因此我们需要将执行者中的this绑定为我们创建的Promise对象。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 5.在构造函数中需要为Promise对象创建status和value记录Promise的状态和传值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">PENDING</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;pending&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">FULFILLED</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;fulfilled&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">REJECTED</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;rejected&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">executor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PENDING</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callbacks</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">executor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">resolve</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">reject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PENDING</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FULFILLED</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onFulfilled</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PENDING</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">REJECTED</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reason</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onRejected</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//开始写then方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//1.then接收2个参数，一个成功回调函数，一个失败回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//2.then中发生错误，状态为rejected，交给下一个then处理</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//3.then返回的也是一个Promise</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//4.then的参数值可以为空，可以进行传值穿透</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//5.then中的方法是异步执行的</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//6.then需要等promise的状态改变后，才执行，并且异步执行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//7.then是可以链式操作的</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//8.then的onFulfilled可以用来返回Promise对象，并且then的状态将以这个Promise为准</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//9.then的默认状态是成功的，上一个Promise对象的状态不会影响下一个then的状态</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//10.then返回的promise对象不是then相同的promise</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">onFulfilled</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">onRejected</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">onFulfilled</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">onFulfilled</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">onRejected</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">onRejected</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reason</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyPromise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FULFILLED</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onFulfilled</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">REJECTED</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onRejected</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PENDING</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">onFulfilled</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onFulfilled</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                    },</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">onRejected</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onRejected</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promise</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//整理冗余代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Chaining cycle detected for promise&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise的静态方法，resolve</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyPromise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise的静态方法，reject</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyPromise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise的静态方法，all</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">promises</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">values</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyPromise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FULFILLED</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E5C07B;">values</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">REJECTED</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">values</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">values</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise的静态方法，race</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">race</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">promises</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MyPromise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//Promise的静态方法，race</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">onRejected</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onRejected</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">//起步构建</span></span>
<span class="line"><span style="color:#6B737C;">// 1.用类创建Promise，类中需要有个执行器executor</span></span>
<span class="line"><span style="color:#6B737C;">// 2.执行者中发生错误，交给异常状态处理</span></span>
<span class="line"><span style="color:#6B737C;">// 3.执行者中状态只能触发一次，状态触发一次之后，不能修改状态</span></span>
<span class="line"><span style="color:#6B737C;">// 4.执行者中的this，由调用执行者的作用域决定，因此我们需要将执行者中的this绑定为我们创建的Promise对象。</span></span>
<span class="line"><span style="color:#6B737C;">// 5.在构造函数中需要为Promise对象创建status和value记录Promise的状态和传值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> MyPromise {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> PENDING </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;pending&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> FULFILLED </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;fulfilled&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> REJECTED </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;rejected&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(executor) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">PENDING</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.callbacks </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [];</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            executor(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">resolve</span><span style="color:#B392F0;">.bind(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">reject</span><span style="color:#B392F0;">.bind(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">))</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (error) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.reject(error)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    resolve(value) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">PENDING</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">FULFILLED</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> value</span></span>
<span class="line"><span style="color:#B392F0;">            setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.map(item </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    </span><span style="color:#79B8FF;">item</span><span style="color:#B392F0;">.onFulfilled(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"><span style="color:#B392F0;">                })</span></span>
<span class="line"><span style="color:#B392F0;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    reject(reason) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">PENDING</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">REJECTED</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reason</span></span>
<span class="line"><span style="color:#B392F0;">            setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.map(item </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    </span><span style="color:#79B8FF;">item</span><span style="color:#B392F0;">.onRejected(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"><span style="color:#B392F0;">                })</span></span>
<span class="line"><span style="color:#B392F0;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//开始写then方法</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//1.then接收2个参数，一个成功回调函数，一个失败回调函数</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//2.then中发生错误，状态为rejected，交给下一个then处理</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//3.then返回的也是一个Promise</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//4.then的参数值可以为空，可以进行传值穿透</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//5.then中的方法是异步执行的</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//6.then需要等promise的状态改变后，才执行，并且异步执行</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//7.then是可以链式操作的</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//8.then的onFulfilled可以用来返回Promise对象，并且then的状态将以这个Promise为准</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//9.then的默认状态是成功的，上一个Promise对象的状态不会影响下一个then的状态</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//10.then返回的promise对象不是then相同的promise</span></span>
<span class="line"><span style="color:#B392F0;">    then(onFulfilled</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onRejected) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> onFulfilled </span><span style="color:#F97583;">!=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            onFulfilled </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> value </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> value</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> onRejected </span><span style="color:#F97583;">!=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            onRejected </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reason </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> reason</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> promise </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyPromise((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">FULFILLED</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.parse(promise</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onFulfilled(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">                });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">REJECTED</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.parse(promise</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onRejected(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.value)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">                })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">PENDING</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">callbacks</span><span style="color:#B392F0;">.push({</span></span>
<span class="line"><span style="color:#B392F0;">                    onFulfilled</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> value </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.parse(promise</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onFulfilled(value)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">                    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">                    onRejected</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> reason </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.parse(promise</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onRejected(reason)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">                    }</span></span>
<span class="line"><span style="color:#B392F0;">                });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> promise</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//整理冗余代码</span></span>
<span class="line"><span style="color:#B392F0;">    parse(promise</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> result</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (promise </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> result) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> TypeError(</span><span style="color:#FFAB70;">&#39;Chaining cycle detected for promise&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (result </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> MyPromise) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">result</span><span style="color:#B392F0;">.then(resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">            } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                resolve(result)</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (error) {</span></span>
<span class="line"><span style="color:#B392F0;">            reject(error)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise的静态方法，resolve</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> resolve(value) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyPromise((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (value </span><span style="color:#F97583;">instanceof</span><span style="color:#B392F0;"> MyPromise) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">value</span><span style="color:#B392F0;">.then(resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject)</span></span>
<span class="line"><span style="color:#B392F0;">            } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                resolve(value)</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise的静态方法，reject</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> reject(reason) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyPromise((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            reject(reason)</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise的静态方法，all</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> all(promises) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> values </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [];</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyPromise((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">promises</span><span style="color:#B392F0;">.forEach(promise </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">promise</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">FULFILLED</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                    </span><span style="color:#79B8FF;">values</span><span style="color:#B392F0;">.push(</span><span style="color:#79B8FF;">promise</span><span style="color:#B392F0;">.value)</span></span>
<span class="line"><span style="color:#B392F0;">                } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">promise</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MyPromise</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">REJECTED</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                    reject(</span><span style="color:#79B8FF;">promise</span><span style="color:#B392F0;">.value)</span></span>
<span class="line"><span style="color:#B392F0;">                }</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">values</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">promises</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                    resolve(values)</span></span>
<span class="line"><span style="color:#B392F0;">                }</span></span>
<span class="line"><span style="color:#B392F0;">            });</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise的静态方法，race</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">static</span><span style="color:#B392F0;"> race(promises) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyPromise((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">promises</span><span style="color:#B392F0;">.forEach(promise </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">promise</span><span style="color:#B392F0;">.then(value </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    resolve(value)</span></span>
<span class="line"><span style="color:#B392F0;">                })</span></span>
<span class="line"><span style="color:#B392F0;">            });</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//Promise的静态方法，race</span></span>
<span class="line"><span style="color:#B392F0;">    catch (onRejected) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.then(</span><span style="color:#79B8FF;">null</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> onRejected)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br></div></div><h5 id="async-await" tabindex="-1">Async Await <a class="header-anchor" href="#async-await" aria-hidden="true">#</a></h5><p>Async Await是ES6中对Promise的进一步封装语法糖。它能使得我们的Promise的异步代码，看上去像是同步书写。Promise虽然可以解决多个异步任务的执行顺序问题，但写法依然采用了回调的形式，当多个Promise嵌套使用时，依然会变得很难看。采用Async Await可以很好的解决这个问题。</p><p>Async Await的原理借鉴了ES5中的生成器。目的是化简Promise API。</p><p>async加在函数声明之前，使得整个函数内部，变为Promise的同步部分。</p><p>await必须在async函数中使用，后面一般跟一个Promise对象，得到promise对象的thenabled的状态数据。若await后面非Promise对象，则返回该值。</p><p>await下一行开始的代码，需等待await后的表达式执行完毕后，才会执行。</p><h5 id="面试真题与解答" tabindex="-1">面试真题与解答 <a class="header-anchor" href="#面试真题与解答" aria-hidden="true">#</a></h5><ol><li>封装setTimeout，模拟setInterval</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//封装setTimeout</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mySetTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`等待</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">time</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">s,执行...\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">mySetTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//模拟setInterval</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mySetInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">mySetInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">//封装setTimeout</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> delay(time) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      resolve();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> time);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mySetTimeout(time) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> delay(time);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">\`等待</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">time</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">s,执行...\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mySetTimeout(</span><span style="color:#F8F8F8;">2000</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//模拟setInterval</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mySetInterval(time) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> delay(time);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(i</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> delay(time) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      resolve();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> time);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mySetInterval(</span><span style="color:#F8F8F8;">1000</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><ol start="2"><li><p>Promise的缺点：</p><p>无法取消。</p></li></ol><h3 id="_4-对async-await-的理解" tabindex="-1">4. 对async/await 的理解 <a class="header-anchor" href="#_4-对async-await-的理解" aria-hidden="true">#</a></h3><p>async/await是generator和promise的语法糖</p><p>async返回一个promise</p><p>async 函数没有返回值，会返回 Promise.resolve(undefined)</p><p>Ps:Promise.resolve(x) 可以看作是 new Promise(resolve =&gt; resolve(x))的简写</p><h5 id="await-到底在等啥" tabindex="-1">await 到底在等啥？ <a class="header-anchor" href="#await-到底在等啥" aria-hidden="true">#</a></h5><p>在等一个返回值：</p><ul><li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li><li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li></ul><h5 id="async-await-如何捕获异常" tabindex="-1">async/await 如何捕获异常 <a class="header-anchor" href="#async-await-如何捕获异常" aria-hidden="true">#</a></h5><p>try...catch</p><h3 id="_5-async-await对比promise的优势" tabindex="-1">5. async/await对比Promise的优势 <a class="header-anchor" href="#_5-async-await对比promise的优势" aria-hidden="true">#</a></h3><p>asyncawait类似于同步写法，比promise链式调用简洁，传值方便，异常捕获方便，调试方便。</p><h3 id="_6-事件循环——evenloop" tabindex="-1">6. 事件循环——EvenLoop <a class="header-anchor" href="#_6-事件循环——evenloop" aria-hidden="true">#</a></h3><p>事件循环是执JS引擎与宿主环境配合，执行执行栈顶部任务，并在执行完毕后询问异步队列，并将异步队列的第一个任务取出放入栈中执行，并循环执行-询问-取出-执行这个过程的方式。</p><p>这里涉及到一些概念：</p><p>**<em>宿主环境</em>：**JS运行的环境称作宿主环境，JS在浏览器中运行，浏览器就是宿主环境。nodejs代码的宿主环境，即为node。</p><p><strong><em>浏览器的宿主环境有5个线程</em>：</strong></p><ul><li>JS引擎：负责执行执行栈中最顶部的代码。</li><li>GUI线程：负责渲染页面</li><li>事件监听线程：负责监听各种事件</li><li>计时线程：负责计时。<code>&lt;!--（比如定时器的事件，也就证明了定时任务的计时和执行事件并不一样，计时结束后，将异步任务放入异步队列中等待执行，而不是立马执行，会有时间误差。）--&gt;</code></li><li>网络线程：负责网络通信。<code>&lt;!--比如http请求--&gt;</code></li></ul><p>以上线程解析到对应的事件就会放入异步队列中等待执行事件的处理函数。JS引擎在执行栈中没有任务时，就会去队列中取出第一个任务放入执行栈中执行。我们把这种JS引擎与宿主环境配合询问并取出任务执行的方式，称之为事件循环。</p><p>**<em>执行栈</em>：**是各种函数的执行环境。一个函数执行之前，会将相关信息加入栈中。JS引擎每一次执行都是执行栈顶的函数。函数调用的时候，会创建执行环境，并放入栈中执行，执行完毕后会销毁执行环境。</p><p><em><strong>异步函数</strong></em>：不会立马执行的函数，也就是会放入异步队列中等待执行的函数。例如，事件处理函数，定时器回调函数，http请求回调函数。异步函数的执行时机，是由宿主环境控制的。</p><p><em><strong>同步任务</strong></em>：JavaScirpt中，大部分都是同步任务</p><p><em><strong>宏任务</strong></em>：定时器任务，http请求</p><p><em><strong>微任务</strong></em>：Promise.then()，监听DOM属性变化的mutationObserver回调函数<code>&lt;!--相当于异步任务中的vip--&gt;</code></p><h5 id="事件与回调的缺陷" tabindex="-1">事件与回调的缺陷 <a class="header-anchor" href="#事件与回调的缺陷" aria-hidden="true">#</a></h5><ol><li>异步执行前后顺序：某一个回调需要等待多个回调函数执行完毕后执行，由于异步任务执行时间不为我们所控制，不能使用同步的写法。</li><li>回调地狱：执行某一个回调函数依赖前面的一个或多个回调函数执行的结果。若使用普通的写法，在一个函数中调用后一个函数，会造成回调地狱的问题。</li></ol><p>为解决以上问题，ES6推出了Promise。</p><h5 id="js单线程的优劣势" tabindex="-1">JS单线程的优劣势 <a class="header-anchor" href="#js单线程的优劣势" aria-hidden="true">#</a></h5><p>单线程的优势：在于不用考虑线程调度问题，降低了程序的复杂性。</p><p>单线程的劣势：当一个任务处理时间比较长时，后面的任务都会进入等待，会造成阻塞问题。</p><p>JavaScript由于其与用户交流的特性，如果采用多线程，则可能出现一个线程正在使用一个DOM，另一个线程要删除一个DOM，容易造成混乱。所以JS选择单线程是情理之中，而对于阻塞问题，JS采取异步的方式，得到了有效的解决。</p><h5 id="面试真题与解答-1" tabindex="-1">面试真题与解答 <a class="header-anchor" href="#面试真题与解答-1" aria-hidden="true">#</a></h5><ol><li><p>如何理解JS异步</p><p>由于JS中，事件处理，http请求，定时器等任务，都可能出现处理时间过长的情况，造成后面的任务阻塞。又因为浏览器的GUI渲染引擎与JS执行引擎是互斥的。也就是说，当JS执行事件过长，GUI引擎不渲染，浏览器会出现无响应或卡死的情况。因此，JS通过异步来解决这类问题。通过将执行时间长的任务，通知其他线程去帮助处理，JS自己则去处理后续任务。其他线程处理完这些任务会通知JS引擎已经处理完毕。JS执行完执行栈中任务后，再将事先定义好的异步的回调函数拿到执行栈中执行即可，使得JS执行栈可以无阻塞的去执行任务，也可以避免浏览器卡死的情况。</p><p>关于异步回调函数的书写，在ES5以前，程序员书写回调函数非常随意，不便于阅读和维护。为了规范回调函数的书写，JS社区出现了PromiseA+规范。在ES6中采用了这一规范，出现了Promise对象。后来为了进一步简化Promise的书写，又诞生了async、await。</p></li><li><p>如何理解JS单线程。</p><p>JS是单线程语言，而浏览器不是。也就是说，JS的代码从上往下按顺序执行，不会出现中断，不会共享资源，容易掌握。由于不需要频繁创建销毁线程，不会造程这方面的CPU和内存浪费。需要注意的是，处理好任务阻塞的问题，JS是通过异步来解决的。</p></li></ol>`,76),c=[r];function t(B,y,F,i,A,m){return a(),n("div",null,c)}const C=s(e,[["render",t]]);export{u as __pageData,C as default};
