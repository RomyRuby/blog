import{_ as s,c as a,o as n,a as l}from"./app.2d43daee.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. map和Object的区别","slug":"_1-map和object的区别","link":"#_1-map和object的区别","children":[]},{"level":3,"title":"2. 数组有哪些原生方法？","slug":"_2-数组有哪些原生方法","link":"#_2-数组有哪些原生方法","children":[]},{"level":3,"title":"3. 什么是 DOM 和 BOM？","slug":"_3-什么是-dom-和-bom","link":"#_3-什么是-dom-和-bom","children":[]},{"level":3,"title":"4. 对类数组对象的理解，如何转化为数组","slug":"_4-对类数组对象的理解-如何转化为数组","link":"#_4-对类数组对象的理解-如何转化为数组","children":[]},{"level":3,"title":"5. 对AJAX的理解，实现一个AJAX请求","slug":"_5-对ajax的理解-实现一个ajax请求","link":"#_5-对ajax的理解-实现一个ajax请求","children":[]},{"level":3,"title":"6. 什么是尾调用，使用尾调用有什么好处？","slug":"_6-什么是尾调用-使用尾调用有什么好处","link":"#_6-什么是尾调用-使用尾调用有什么好处","children":[]},{"level":3,"title":"7. ES6模块与CommonJS模块有什么异同？","slug":"_7-es6模块与commonjs模块有什么异同","link":"#_7-es6模块与commonjs模块有什么异同","children":[]},{"level":3,"title":"8. map和weakMap的区别","slug":"_8-map和weakmap的区别","link":"#_8-map和weakmap的区别","children":[]},{"level":3,"title":"9. 常见的DOM操作有哪些","slug":"_9-常见的dom操作有哪些","link":"#_9-常见的dom操作有哪些","children":[]},{"level":3,"title":"10. use strict是什么意思 ? 使用它区别是什么？","slug":"_10-use-strict是什么意思-使用它区别是什么","link":"#_10-use-strict是什么意思-使用它区别是什么","children":[]},{"level":3,"title":"11. 如何判断一个对象是否属于某个类？","slug":"_11-如何判断一个对象是否属于某个类","link":"#_11-如何判断一个对象是否属于某个类","children":[]},{"level":3,"title":"12. 强类型语言和弱类型语言的区别","slug":"_12-强类型语言和弱类型语言的区别","link":"#_12-强类型语言和弱类型语言的区别","children":[]},{"level":3,"title":"13. 解释性语言和编译型语言的区别","slug":"_13-解释性语言和编译型语言的区别","link":"#_13-解释性语言和编译型语言的区别","children":[]},{"level":3,"title":"14. for...in和for...of的区别","slug":"_14-for-in和for-of的区别","link":"#_14-for-in和for-of的区别","children":[]},{"level":3,"title":"15. 如何使用for...of遍历对象","slug":"_15-如何使用for-of遍历对象","link":"#_15-如何使用for-of遍历对象","children":[]},{"level":3,"title":"16. ajax、axios、fetch的区别","slug":"_16-ajax、axios、fetch的区别","link":"#_16-ajax、axios、fetch的区别","children":[]},{"level":3,"title":"17. 数组的遍历方法有哪些","slug":"_17-数组的遍历方法有哪些","link":"#_17-数组的遍历方法有哪些","children":[]},{"level":3,"title":"18. forEach和map方法有什么区别","slug":"_18-foreach和map方法有什么区别","link":"#_18-foreach和map方法有什么区别","children":[]},{"level":3,"title":"19. 浏览器的垃圾回收机制","slug":"_19-浏览器的垃圾回收机制","link":"#_19-浏览器的垃圾回收机制","children":[]},{"level":3,"title":"20. 哪些情况会导致内存泄漏","slug":"_20-哪些情况会导致内存泄漏","link":"#_20-哪些情况会导致内存泄漏","children":[]}],"relativePath":"JavaScript/javaScript-base.md","lastUpdated":1693810075000}'),p={name:"JavaScript/javaScript-base.md"},e=l(`<h3 id="_1-map和object的区别" tabindex="-1">1. map和Object的区别 <a class="header-anchor" href="#_1-map和object的区别" aria-hidden="true">#</a></h3><p>map：没有原型上的键，键可以是任意类型，key是有顺序的，迭代的时候按插入的顺序，size方法获取键值对个数，频繁增删性能更好</p><p>object：原型上有意外的键，键只能是string或symbol，key无序</p><h3 id="_2-数组有哪些原生方法" tabindex="-1">2. 数组有哪些原生方法？ <a class="header-anchor" href="#_2-数组有哪些原生方法" aria-hidden="true">#</a></h3><p>转字符串：toString、toLocalString、join</p><p>尾部操作：pop、push</p><p>首部操作：shift、unshift</p><p>连接数组：concat（不影响原数组）</p><p>截取数组：slice（不影响原数组）</p><p>插入/删除：splice（影响原数组），indexOf、lastIndexOf</p><p>迭代方法：evrey、some、filter、map、forEach</p><h3 id="_3-什么是-dom-和-bom" tabindex="-1">3. 什么是 DOM 和 BOM？ <a class="header-anchor" href="#_3-什么是-dom-和-bom" aria-hidden="true">#</a></h3><p>DOM：文档对象模型，document上的处理网页内容的方法和接口</p><p>BOM：浏览器对象，window上的与浏览器进行交互的方法和接口</p><h3 id="_4-对类数组对象的理解-如何转化为数组" tabindex="-1">4. 对类数组对象的理解，如何转化为数组 <a class="header-anchor" href="#_4-对类数组对象的理解-如何转化为数组" aria-hidden="true">#</a></h3><p>类数组：有length属性</p><p>Array.from(arrayLike)</p><h3 id="_5-对ajax的理解-实现一个ajax请求" tabindex="-1">5. 对AJAX的理解，实现一个AJAX请求 <a class="header-anchor" href="#_5-对ajax的理解-实现一个ajax请求" aria-hidden="true">#</a></h3><p>Ajax：异步请求，获取数据，不刷新整个页面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SERVER_URL</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;/server&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Http 请求</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置状态监听函数</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 当请求成功时</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置请求失败时的监听函数</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置请求头信息</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseType</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Accept&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 Http 请求</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">SERVER_URL</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/server&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> XMLHttpRequest();</span></span>
<span class="line"><span style="color:#6B737C;">// 创建 Http 请求</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.open(</span><span style="color:#FFAB70;">&quot;GET&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// 设置状态监听函数</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.onreadystatechange </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.readyState </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">return</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 当请求成功时</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.status </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">200</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    handle(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.response);</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.error(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.statusText);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#6B737C;">// 设置请求失败时的监听函数</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.onerror </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.error(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.statusText);</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#6B737C;">// 设置请求头信息</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.responseType </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;json&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.setRequestHeader(</span><span style="color:#FFAB70;">&quot;Accept&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;application/json&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// 发送 Http 请求</span></span>
<span class="line"><span style="color:#79B8FF;">xhr</span><span style="color:#B392F0;">.send(</span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_6-什么是尾调用-使用尾调用有什么好处" tabindex="-1">6. 什么是尾调用，使用尾调用有什么好处？ <a class="header-anchor" href="#_6-什么是尾调用-使用尾调用有什么好处" aria-hidden="true">#</a></h3><p>尾调用：在函数的末尾调用另一个函数</p><p>好处是在最后调用，上下文不会保留，可以节省空间。</p><h3 id="_7-es6模块与commonjs模块有什么异同" tabindex="-1">7. <strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？ <a class="header-anchor" href="#_7-es6模块与commonjs模块有什么异同" aria-hidden="true">#</a></h3><p>都可以用来引入模块，CommonJS是对模块浅拷贝，ES6是对模块引用。</p><h3 id="_8-map和weakmap的区别" tabindex="-1">8. map和weakMap的区别 <a class="header-anchor" href="#_8-map和weakmap的区别" aria-hidden="true">#</a></h3><p>map的key可以是任意类型，但weakMap只能是对象</p><p>weakmap键名指向的对象是弱引用，不计入垃圾回收机制</p><h3 id="_9-常见的dom操作有哪些" tabindex="-1">9. 常见的DOM操作有哪些 <a class="header-anchor" href="#_9-常见的dom操作有哪些" aria-hidden="true">#</a></h3><p>获取节点：getElementById、getElementsByTagName、getElementsByClassName、querySelectorAll</p><p>创建节点：document.<strong>createElement</strong>(&#39;span&#39;)</p><p>删除节点：<strong>removeChild</strong></p><p>修改节点：<strong>insertBefore</strong></p><h3 id="_10-use-strict是什么意思-使用它区别是什么" tabindex="-1">10. use strict是什么意思 ? 使用它区别是什么？ <a class="header-anchor" href="#_10-use-strict是什么意思-使用它区别是什么" aria-hidden="true">#</a></h3><p>严格模式。</p><p>区别：this不指向全局、不能定义重名变量</p><h3 id="_11-如何判断一个对象是否属于某个类" tabindex="-1">11. 如何判断一个对象是否属于某个类？ <a class="header-anchor" href="#_11-如何判断一个对象是否属于某个类" aria-hidden="true">#</a></h3><p>instanceof、constructor、Object.prototype.toString()</p><h3 id="_12-强类型语言和弱类型语言的区别" tabindex="-1">12. 强类型语言和弱类型语言的区别 <a class="header-anchor" href="#_12-强类型语言和弱类型语言的区别" aria-hidden="true">#</a></h3><p>强类型：定义类型约束，弱类型：不定义类型约束，赋值可以转换类型</p><h3 id="_13-解释性语言和编译型语言的区别" tabindex="-1">13. 解释性语言和编译型语言的区别 <a class="header-anchor" href="#_13-解释性语言和编译型语言的区别" aria-hidden="true">#</a></h3><p>解释型语言：执行时报错</p><p>编译型语言：编译阶段报错</p><h3 id="_14-for-in和for-of的区别" tabindex="-1">14. for...in和for...of的区别 <a class="header-anchor" href="#_14-for-in和for-of的区别" aria-hidden="true">#</a></h3><p>for of遍历可迭代对象，只遍历当前对象，主要遍历数组、类数组对象、字符串、set、map等</p><p>for in 遍历键名，遍历整个原型链，主要遍历对象</p><h3 id="_15-如何使用for-of遍历对象" tabindex="-1">15. 如何使用for...of遍历对象 <a class="header-anchor" href="#_15-如何使用for-of遍历对象" aria-hidden="true">#</a></h3><ol><li>转成数组遍历</li><li>添加[Symbol.iterator]属性，并指向一个迭代器</li></ol><h3 id="_16-ajax、axios、fetch的区别" tabindex="-1">16. ajax、axios、fetch的区别 <a class="header-anchor" href="#_16-ajax、axios、fetch的区别" aria-hidden="true">#</a></h3><p><strong>AJAX</strong>：异步请求，基于原生XHR，配置和调用比较混乱</p><p>fetch：没用XHR，基于promise，简洁，但只有网络错误会reject，400/500都视为成功。</p><h3 id="_17-数组的遍历方法有哪些" tabindex="-1">17. 数组的遍历方法有哪些 <a class="header-anchor" href="#_17-数组的遍历方法有哪些" aria-hidden="true">#</a></h3><p>for of、forEach、map、every、some、filter、find、findIndex、reduce、</p><h3 id="_18-foreach和map方法有什么区别" tabindex="-1">18. forEach和map方法有什么区别 <a class="header-anchor" href="#_18-foreach和map方法有什么区别" aria-hidden="true">#</a></h3><p>forEach会修改原数组，map会返回一个新的数组</p><h3 id="_19-浏览器的垃圾回收机制" tabindex="-1">19. 浏览器的垃圾回收机制 <a class="header-anchor" href="#_19-浏览器的垃圾回收机制" aria-hidden="true">#</a></h3><ol><li>标记清楚：变量进入执行环境时标记为进入环境，执行完标记为离开环境，离开环境的变量会被回收。</li><li>引用计数：引用一次计数加1，引用计数为0的会被回收。存在循环引用的问题</li></ol><p>ps: 垃圾回收会消耗性能。</p><h3 id="_20-哪些情况会导致内存泄漏" tabindex="-1">20. 哪些情况会导致内存泄漏 <a class="header-anchor" href="#_20-哪些情况会导致内存泄漏" aria-hidden="true">#</a></h3><ul><li>不合理的闭包</li><li>意外的全局变量</li><li>被遗忘的计时器</li><li>引用删除了的dom</li></ul>`,60),o=[e];function r(t,c,i,B,y,F){return n(),a("div",null,o)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
